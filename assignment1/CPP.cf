-- A program is a sequence of definitions. (1)
PDefs. Program ::= [Def] ;
terminator Def "" ;
-- A program may also contain comments and preprocessor directives, which are just ignored by the parser
comment "//" ;
comment "#include" ;
-- A function definition has a type, a name, an argument list, and a body.
MDef. Def ::= Type Name "(" [Arg] ")" "{" Body "}" ;
token Name (letter (letter | digit | '_')*) ;
separator Arg "," ;
MArg. Arg ::= Type Name ;
-- A function body is either a list of statements enclosed in curly brackets { and }
MBody. Body ::= [Stm] ;
terminator Stm "" ;
-- *** Statements ***
-- Any expression followed by a semicolon ; can be used as a statement. 
ExpStm. Stm ::= Exp ";" ;
-- Statements returning an expression
RetStm. Stm ::= "return" Exp ";" ;
-- *** Expressions ***
IntExp. Exp2 ::= Integer ;
LitExp. Exp2 ::= Name ;
StrLitExp. Exp2 ::= String ;
QualiConstExp. Exp1 ::= QC ;
LeftShiftExp. Exp ::= Exp "<<" Exp ;
coercions Exp 2 ;
-- *** Types ***
Tint. Type ::= "int" ;

QCM. QC ::= Name "::" Name
