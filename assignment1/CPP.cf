-- A program is a sequence of definitions. (1)
DefsProg. Program ::= [Def] ;
terminator Def "" ;
-- A program may also contain comments and preprocessor directives, which are just ignored by the parser
comment "//" ;
comment "#include" ;
comment "#endif" ;
comment "#ifndef" ;
comment "#ifdef" ;
comment "#else" ;
comment "/*" "*/" ;
-- *** Definitions *** --
-- A function definition has a type, a name, an argument list, and a body.
DefFun. Def ::= Type Name "(" [Arg] ")" "{" Body "}" ;
-- A function can optionally be prefixed by inline.
DefInlineFun. Def ::= "inline" Type Name "(" [Arg] ")" "{" Body "}" ;
-- Finally, definitions for using qualified constants are allowed
DefQualifiedConst. Def ::= "using" QualifiedConst ";" ;
-- An argument list is a comma-separated list of argument declarations. It is enclosed in parentheses ( and ).
separator Arg "," ;
MArg. Arg ::= Type Name ;
-- A function body is either a list of statements enclosed in curly brackets { and }
MBody. Body ::= [Stm] ;
terminator Stm "" ;
-- *** Statements *** --
-- Any expression followed by a semicolon ; can be used as a statement. 
ExpStm. Stm ::= Exp ";" ;
-- Any declaration followed by a semicolon ; can be used as a statement.
DecStm. Stm ::= Decl ";" ;
-- Statements returning an expression
RetStm. Stm ::= "return" Exp ";" ;
-- While loops, with an expression in parentheses followed by a statement:
StmWhile. Stm ::= "while" "(" Exp ")" Stm ;
-- *** Declarations ***
-- Declarations have the same form as argument declarations in functions,
MDecl. Decl ::= Type DeclNames ;
DeclTypeDef. Decl ::= "typedef" Type DeclNames ;
DNElem. DeclNames ::= Name ;
DNCons. DeclNames ::= DeclNames "," Name ;

-- except that they can have more than one variable.

-- *** Expressions *** --
-- atomic expressions
IntExp. Exp2 ::= Integer ;
LitExp. Exp2 ::= Name ;
StrLitExp. Exp2 ::= Str ;
-- indexing and qualified constants
QualiConstExp. Exp1 ::= QualifiedConst ;
ExpIndexing. Exp1 ::= Exp "(" Name ")" ;
-- function call
ExpFuncCall. Exp1 ::= Exp "(" [Exp] ")" ;
-- structure projection
ExpStructProj1. Exp1 ::= Exp "." Exp ;
ExpStructProj2. Exp1 ::= Exp "->" Exp ;
LeftShiftExp. Exp ::= Exp "<<" Exp ;
RightShiftExp. Exp ::= Exp ">>" Exp ;
coercions Exp 2 ;
separator Exp "," ;
-- *** Types *** --
Tint. Type ::= "int" ;
Tdouble. Type ::= "double" ;
TQualifiedConst. Type ::= QualifiedConst ;

-- Qualified constants are constant names separated by ::. 
QCElem. QualifiedConst ::= Name ;
QCCond. QualifiedConst ::= QualifiedConst "::" QualifiedConst ;
QCTemplElem. QualifiedConst ::= Name "<" Type ">" ;
-- Names can be identifiers but also template instantiations, of the form


token Name (letter (letter | digit | '_')*) ;
-- A string literal may consist of many can be concatenated strings and in this way divided over lines
StrEle. Str ::= String ;
StrCons. Str ::= Str Str
